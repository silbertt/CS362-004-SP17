CARD TEST 3 RESULTS:
RANDOM TEST 3 - 'GREAT HALL' - CARD FUNCTION

*****GREAT HALL CARD FAILED*****

File 'dominion.c'
Lines executed:17.61% of 568
Branches executed:15.64% of 422
Taken at least once:10.43% of 422
Calls executed:12.12% of 99
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    55464:    8:int compare(const void* a, const void* b) {
    55464:    9:  if (*(int*)a > *(int*)b)
    26244:   10:    return 1;
    29220:   11:  if (*(int*)a < *(int*)b)
     7884:   12:    return -1;
    21336:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
      380:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      380:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      380:  209:  if (state->deckCount[player] < 1)
      350:  210:    return -1;
       30:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     8364:  214:  while (state->deckCount[player] > 0) {
     8304:  215:    card = floor(Random() * state->deckCount[player]);
     8304:  216:    newDeck[newDeckPos] = state->deck[player][card];
     8304:  217:    newDeckPos++;
   642210:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   633906:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     8304:  221:    state->deckCount[player]--;
        -:  222:  }
     8334:  223:  for (i = 0; i < newDeckPos; i++) {
     8304:  224:    state->deck[player][i] = newDeck[i];
     8304:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       30:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    40750:  346:int whoseTurn(struct gameState *state) {
    40750:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    43776:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    43776:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    16565:  533:    for (i = 0; i < state->discardCount[player];i++){
    16308:  534:      state->deck[player][i] = state->discard[player][i];
    16308:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      257:  538:    state->deckCount[player] = state->discardCount[player];
      257:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      257:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      257:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      257:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      257:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      257:  559:    if (deckCounter == 0)
      223:  560:      return -1;
        -:  561:
       34:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       34:  563:    state->deckCount[player]--;
       34:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    43519:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    43519:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    43519:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    43519:  576:    state->deckCount[player]--;
    43519:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    43553:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      750:  646:int playAdventurer(struct gameState * state)
        -:  647:{
      750:  648:  int currentPlayer = whoseTurn(state);
      750:  649:  int drawntreasure = 0;
        -:  650:  int cardDrawn;
        -:  651:  int temphand[MAX_HAND];
      750:  652:  int z = 0; //counter for tempand
    23430:  653:  while(drawntreasure<2){
    21930:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
      123:  655: 	shuffle(currentPlayer, state);
        -:  656:    }
    21930:  657:    drawCard(currentPlayer, state);
    21930:  658:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    21930:  659:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
     1500:  660:     	 drawntreasure++;
        -:  661:	}
        -:  662:    else{
    20430:  663:      temphand[z]=cardDrawn;
    20430:  664:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    20430:  665:      z++;
        -:  666:    }
        -:  667:  }
        -:  668:  // Bug1: Unexpected increment of numBuys
      750:  669:  state->numBuys++;
    20490:  670:  while(z-1>=0){
    18990:  671:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    18990:  672:    z=z-1;
        -:  673:        }
      750:  674:  return 0;
        -:  675:}
        -:  676:
    20000:  677:int playSmithy(struct gameState *state, int handPos)
        -:  678:{
    20000:  679:  int currentPlayer = whoseTurn(state);
        -:  680:  int i;
        -:  681:  //+3 Cards
        -:  682:  // Bug2: Unexpected number of cards drawn
    21846:  683:  for (i = handPos; i < 3; i++)
        -:  684:  {
     1846:  685:    drawCard(currentPlayer, state);
        -:  686:  }
        -:  687:        
        -:  688:  //discard card from hand
    20000:  689:  discardCard(handPos, currentPlayer, state, 0);
    20000:  690:  return 0;
        -:  691:}
        -:  692:
    #####:  693:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos)
        -:  694:{
    #####:  695:  int currentPlayer = whoseTurn(state);
        -:  696:  int i;
    #####:  697:  int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  698:
    #####:  699:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  700:  {
    #####:  701:    return -1;
        -:  702:  }
        -:  703:
    #####:  704:  gainCard(choice2, state, 0, currentPlayer);
        -:  705:
        -:  706:  //discard card from hand
    #####:  707:  discardCard(handPos, currentPlayer, state, 0);
        -:  708:
        -:  709:  //discard trashed card
    #####:  710:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  711:  {
    #####:  712:    if (state->hand[currentPlayer][i] == j)
        -:  713:      {
    #####:  714:        discardCard(i, currentPlayer, state, 0);      
    #####:  715:        break;
        -:  716:      }
        -:  717:  }
        -:  718:
        -:  719:
    #####:  720:  return 0;
        -:  721:}
        -:  722:
    #####:  723:int playSea_Hag(struct gameState *state)
        -:  724:{
    #####:  725:  int currentPlayer = whoseTurn(state);
        -:  726:  int i;
    #####:  727:  for (i = 0; i < state->numPlayers; i++){
    #####:  728:    if (i != currentPlayer){
    #####:  729:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          
        -:  730:      //  Bug3: deckCount for player i is not decremented 
    #####:  731:      state->discardCount[i]++;
    #####:  732:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  733:    }
        -:  734:  }
    #####:  735:  return 0;
        -:  736:}
        -:  737:
    #####:  738:int playCouncil_Room(struct gameState *state, int handPos)
        -:  739:{
    #####:  740:  int currentPlayer = whoseTurn(state);
        -:  741:  int i;
        -:  742:  //+4 Cards
    #####:  743:  for (i = 0; i < 4; i++)
        -:  744:  {
    #####:  745:    drawCard(currentPlayer, state);
        -:  746:  }
        -:  747:        
        -:  748:  //+1 Buy
    #####:  749:  state->numBuys++;
        -:  750:  
        -:  751:  //Each other player draws a card
    #####:  752:  for (i = 0; i < state->numPlayers; i++)
        -:  753:  {
    #####:  754:    if ( i != currentPlayer )
        -:  755:      {
    #####:  756:        drawCard(i, state);
        -:  757:      }
        -:  758:  }
        -:  759:  
        -:  760:  // Bug4: Card is not discarded
        -:  761:  
    #####:  762:  return 0;
        -:  763:}
        -:  764:
    20000:  765:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  766:{
        -:  767:  int i;
        -:  768:  int j;
        -:  769:  int k;
        -:  770:  int x;
        -:  771:  int index;
    20000:  772:  int currentPlayer = whoseTurn(state);
    20000:  773:  int nextPlayer = currentPlayer + 1;
        -:  774:
    20000:  775:  int tributeRevealedCards[2] = {-1, -1};
        -:  776:  int temphand[MAX_HAND];// moved above the if statement
    20000:  777:  if (nextPlayer > (state->numPlayers - 1)){
    20000:  778:    nextPlayer = 0;
        -:  779:  }
        -:  780:  
    20000:  781:  if(card == adventurer)
        -:  782:  {
    #####:  783:    return playAdventurer(state);
        -:  784:  }
    20000:  785:  else if(card == smithy)
        -:  786:  {
    #####:  787:    return playSmithy(state, handPos);
        -:  788:  }
    20000:  789:  else if (card == remodel)
        -:  790:  {
    #####:  791:    return playRemodel(state, choice1, choice2, handPos);
        -:  792:  }
    20000:  793:  else if (card == sea_hag)
        -:  794:  {
    #####:  795:    return playSea_Hag(state);
        -:  796:  }
    20000:  797:  else if (card == council_room)
        -:  798:  {
    #####:  799:    return playCouncil_Room(state, handPos);
        -:  800:  }
        -:  801:	else
        -:  802:  {
        -:  803:    //uses switch to select card and perform actions
    20000:  804:    switch( card ) 
        -:  805:    {
        -:  806:  			
        -:  807:      case feast:
        -:  808:        //gain card with cost up to 5
        -:  809:        //Backup hand
    #####:  810:        for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:  	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  812:  	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  813:        }
        -:  814:        //Backup hand
        -:  815:
        -:  816:        //Update Coins for Buy
    #####:  817:        updateCoins(currentPlayer, state, 5);
    #####:  818:        x = 1;//Condition to loop on
    #####:  819:        while( x == 1) {//Buy one card
    #####:  820:  	if (supplyCount(choice1, state) <= 0){
        -:  821:  	  if (DEBUG)
        -:  822:  	    printf("None of that card left, sorry!\n");
        -:  823:
        -:  824:  	  if (DEBUG){
        -:  825:  	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  826:  	  }
        -:  827:  	}
    #####:  828:  	else if (state->coins < getCost(choice1)){
    #####:  829:  	  printf("That card is too expensive!\n");
        -:  830:
        -:  831:  	  if (DEBUG){
        -:  832:  	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  833:  	  }
        -:  834:  	}
        -:  835:  	else{
        -:  836:
        -:  837:  	  if (DEBUG){
        -:  838:  	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  839:  	  }
        -:  840:
    #####:  841:  	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  842:  	  x = 0;//No more buying cards
        -:  843:
        -:  844:  	  if (DEBUG){
        -:  845:  	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  846:  	  }
        -:  847:
        -:  848:  	}
        -:  849:        }     
        -:  850:
        -:  851:        //Reset Hand
    #####:  852:        for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  853:  	state->hand[currentPlayer][i] = temphand[i];
    #####:  854:  	temphand[i] = -1;
        -:  855:        }
        -:  856:        //Reset Hand
        -:  857:        			
    #####:  858:        return 0;
        -:  859:  			
        -:  860:      case gardens:
    #####:  861:        return -1;
        -:  862:  			
        -:  863:      case mine:
    #####:  864:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  865:
    #####:  866:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  867:  	{
    #####:  868:  	  return -1;
        -:  869:  	}
        -:  870:  		
    #####:  871:        if (choice2 > treasure_map || choice2 < curse)
        -:  872:  	{
    #####:  873:  	  return -1;
        -:  874:  	}
        -:  875:
    #####:  876:        if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  877:  	{
    #####:  878:  	  return -1;
        -:  879:  	}
        -:  880:
    #####:  881:        gainCard(choice2, state, 2, currentPlayer);
        -:  882:
        -:  883:        //discard card from hand
    #####:  884:        discardCard(handPos, currentPlayer, state, 0);
        -:  885:
        -:  886:        //discard trashed card
    #####:  887:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  888:  	{
    #####:  889:  	  if (state->hand[currentPlayer][i] == j)
        -:  890:  	    {
    #####:  891:  	      discardCard(i, currentPlayer, state, 0);			
    #####:  892:  	      break;
        -:  893:  	    }
        -:  894:  	}
        -:  895:  			
    #####:  896:        return 0;
        -:  897:  			
        -:  898:
        -:  899:  		
        -:  900:      case village:
        -:  901:        //+1 Card
    #####:  902:        drawCard(currentPlayer, state);
        -:  903:  			
        -:  904:        //+2 Actions
    #####:  905:        state->numActions = state->numActions + 2;
        -:  906:  			
        -:  907:        //discard played card from hand
    #####:  908:        discardCard(handPos, currentPlayer, state, 0);
    #####:  909:        return 0;
        -:  910:  		
        -:  911:      case baron:
    #####:  912:        state->numBuys++;//Increase buys by 1!
    #####:  913:        if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  914:  	int p = 0;//Iterator for hand!
    #####:  915:  	int card_not_discarded = 1;//Flag for discard set!
    #####:  916:  	while(card_not_discarded){
    #####:  917:  	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  918:  	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  919:  	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  920:  	    state->discardCount[currentPlayer]++;
    #####:  921:  	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  922:  	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  923:  	    }
    #####:  924:  	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  925:  	    state->handCount[currentPlayer]--;
    #####:  926:  	    card_not_discarded = 0;//Exit the loop
        -:  927:  	  }
    #####:  928:  	  else if (p > state->handCount[currentPlayer]){
        -:  929:  	    if(DEBUG) {
        -:  930:  	      printf("No estate cards in your hand, invalid choice\n");
        -:  931:  	      printf("Must gain an estate if there are any\n");
        -:  932:  	    }
    #####:  933:  	    if (supplyCount(estate, state) > 0){
    #####:  934:  	      gainCard(estate, state, 0, currentPlayer);
    #####:  935:  	      state->supplyCount[estate]--;//Decrement estates
    #####:  936:  	      if (supplyCount(estate, state) == 0){
    #####:  937:  		isGameOver(state);
        -:  938:  	      }
        -:  939:  	    }
    #####:  940:  	    card_not_discarded = 0;//Exit the loop
        -:  941:  	  }
        -:  942:  			    
        -:  943:  	  else{
    #####:  944:  	    p++;//Next card
        -:  945:  	  }
        -:  946:  	}
        -:  947:        }
        -:  948:  			    
        -:  949:        else{
    #####:  950:  	if (supplyCount(estate, state) > 0){
    #####:  951:  	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  952:  	  state->supplyCount[estate]--;//Decrement Estates
    #####:  953:  	  if (supplyCount(estate, state) == 0){
    #####:  954:  	    isGameOver(state);
        -:  955:  	  }
        -:  956:  	}
        -:  957:        }
        -:  958:  	    
        -:  959:        
    #####:  960:        return 0;
        -:  961:  		
        -:  962:      case great_hall:
        -:  963:        //+1 Card
    20000:  964:        drawCard(currentPlayer, state);
        -:  965:  			
        -:  966:        //+1 Actions
    20000:  967:        state->numActions++;
        -:  968:  			
        -:  969:        //discard card from hand
    20000:  970:        discardCard(handPos, currentPlayer, state, 0);
    20000:  971:        return 0;
        -:  972:  		
        -:  973:      case minion:
        -:  974:        //+1 action
    #####:  975:        state->numActions++;
        -:  976:  			
        -:  977:        //discard card from hand
    #####:  978:        discardCard(handPos, currentPlayer, state, 0);
        -:  979:  			
    #####:  980:        if (choice1)		//+2 coins
        -:  981:  	{
    #####:  982:  	  state->coins = state->coins + 2;
        -:  983:  	}
        -:  984:  			
    #####:  985:        else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  986:  	{
        -:  987:  	  //discard hand
    #####:  988:  	  while(numHandCards(state) > 0)
        -:  989:  	    {
    #####:  990:  	      discardCard(handPos, currentPlayer, state, 0);
        -:  991:  	    }
        -:  992:  				
        -:  993:  	  //draw 4
    #####:  994:  	  for (i = 0; i < 4; i++)
        -:  995:  	    {
    #####:  996:  	      drawCard(currentPlayer, state);
        -:  997:  	    }
        -:  998:  				
        -:  999:  	  //other players discard hand and redraw if hand size > 4
    #####: 1000:  	  for (i = 0; i < state->numPlayers; i++)
        -: 1001:  	    {
    #####: 1002:  	      if (i != currentPlayer)
        -: 1003:  		{
    #####: 1004:  		  if ( state->handCount[i] > 4 )
        -: 1005:  		    {
        -: 1006:  		      //discard hand
    #####: 1007:  		      while( state->handCount[i] > 0 )
        -: 1008:  			{
    #####: 1009:  			  discardCard(handPos, i, state, 0);
        -: 1010:  			}
        -: 1011:  							
        -: 1012:  		      //draw 4
    #####: 1013:  		      for (j = 0; j < 4; j++)
        -: 1014:  			{
    #####: 1015:  			  drawCard(i, state);
        -: 1016:  			}
        -: 1017:  		    }
        -: 1018:  		}
        -: 1019:  	    }
        -: 1020:  				
        -: 1021:  	}
    #####: 1022:        return 0;
        -: 1023:  		
        -: 1024:      case steward:
    #####: 1025:        if (choice1 == 1)
        -: 1026:  	{
        -: 1027:  	  //+2 cards
    #####: 1028:  	  drawCard(currentPlayer, state);
    #####: 1029:  	  drawCard(currentPlayer, state);
        -: 1030:  	}
    #####: 1031:        else if (choice1 == 2)
        -: 1032:  	{
        -: 1033:  	  //+2 coins
    #####: 1034:  	  state->coins = state->coins + 2;
        -: 1035:  	}
        -: 1036:        else
        -: 1037:  	{
        -: 1038:  	  //trash 2 cards in hand
    #####: 1039:  	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1040:  	  discardCard(choice3, currentPlayer, state, 1);
        -: 1041:  	}
        -: 1042:  			
        -: 1043:        //discard card from hand
    #####: 1044:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1045:        return 0;
        -: 1046:  		
        -: 1047:      case tribute:
    #####: 1048:        if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1049:  	if (state->deckCount[nextPlayer] > 0){
    #####: 1050:  	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:  	  state->deckCount[nextPlayer]--;
        -: 1052:  	}
    #####: 1053:  	else if (state->discardCount[nextPlayer] > 0){
    #####: 1054:  	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1055:  	  state->discardCount[nextPlayer]--;
        -: 1056:  	}
        -: 1057:  	else{
        -: 1058:  	  //No Card to Reveal
        -: 1059:  	  if (DEBUG){
        -: 1060:  	    printf("No cards to reveal\n");
        -: 1061:  	  }
        -: 1062:  	}
        -: 1063:        }
        -: 1064:  	    
        -: 1065:        else{
    #####: 1066:  	if (state->deckCount[nextPlayer] == 0){
    #####: 1067:  	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1068:  	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1069:  	    state->deckCount[nextPlayer]++;
    #####: 1070:  	    state->discard[nextPlayer][i] = -1;
    #####: 1071:  	    state->discardCount[nextPlayer]--;
        -: 1072:  	  }
        -: 1073:  			    
    #####: 1074:  	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1075:  	} 
    #####: 1076:  	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1077:  	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1078:  	state->deckCount[nextPlayer]--;
    #####: 1079:  	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1080:  	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1081:  	state->deckCount[nextPlayer]--;
        -: 1082:        }    
        -: 1083:  		       
    #####: 1084:        if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1085:  	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1086:  	state->playedCardCount++;
    #####: 1087:  	tributeRevealedCards[1] = -1;
        -: 1088:        }
        -: 1089:
    #####: 1090:        for (i = 0; i <= 2; i ++){
    #####: 1091:  	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1092:  	  state->coins += 2;
        -: 1093:  	}
        -: 1094:  		    
    #####: 1095:  	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1096:  	  drawCard(currentPlayer, state);
    #####: 1097:  	  drawCard(currentPlayer, state);
        -: 1098:  	}
        -: 1099:  	else{//Action Card
    #####: 1100:  	  state->numActions = state->numActions + 2;
        -: 1101:  	}
        -: 1102:        }
        -: 1103:  	    
    #####: 1104:        return 0;
        -: 1105:  		
        -: 1106:      case ambassador:
    #####: 1107:        j = 0;		//used to check if player has enough cards to discard
        -: 1108:
    #####: 1109:        if (choice2 > 2 || choice2 < 0)
        -: 1110:  	{
    #####: 1111:  	  return -1;				
        -: 1112:  	}
        -: 1113:
    #####: 1114:        if (choice1 == handPos)
        -: 1115:  	{
    #####: 1116:  	  return -1;
        -: 1117:  	}
        -: 1118:
    #####: 1119:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1120:  	{
    #####: 1121:  	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1122:  	    {
    #####: 1123:  	      j++;
        -: 1124:  	    }
        -: 1125:  	}
    #####: 1126:        if (j < choice2)
        -: 1127:  	{
    #####: 1128:  	  return -1;				
        -: 1129:  	}
        -: 1130:
        -: 1131:        if (DEBUG) 
        -: 1132:  	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1133:
        -: 1134:        //increase supply count for choosen card by amount being discarded
    #####: 1135:        state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1136:  			
        -: 1137:        //each other player gains a copy of revealed card
    #####: 1138:        for (i = 0; i < state->numPlayers; i++)
        -: 1139:  	{
    #####: 1140:  	  if (i != currentPlayer)
        -: 1141:  	    {
    #####: 1142:  	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1143:  	    }
        -: 1144:  	}
        -: 1145:
        -: 1146:        //discard played card from hand
    #####: 1147:        discardCard(handPos, currentPlayer, state, 0);			
        -: 1148:
        -: 1149:        //trash copies of cards returned to supply
    #####: 1150:        for (j = 0; j < choice2; j++)
        -: 1151:  	{
    #####: 1152:  	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1153:  	    {
    #####: 1154:  	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1155:  		{
    #####: 1156:  		  discardCard(i, currentPlayer, state, 1);
    #####: 1157:  		  break;
        -: 1158:  		}
        -: 1159:  	    }
        -: 1160:  	}			
        -: 1161:
    #####: 1162:        return 0;
        -: 1163:  		
        -: 1164:      case cutpurse:
        -: 1165:
    #####: 1166:        updateCoins(currentPlayer, state, 2);
    #####: 1167:        for (i = 0; i < state->numPlayers; i++)
        -: 1168:  	{
    #####: 1169:  	  if (i != currentPlayer)
        -: 1170:  	    {
    #####: 1171:  	      for (j = 0; j < state->handCount[i]; j++)
        -: 1172:  		{
    #####: 1173:  		  if (state->hand[i][j] == copper)
        -: 1174:  		    {
    #####: 1175:  		      discardCard(j, i, state, 0);
    #####: 1176:  		      break;
        -: 1177:  		    }
    #####: 1178:  		  if (j == state->handCount[i])
        -: 1179:  		    {
    #####: 1180:  		      for (k = 0; k < state->handCount[i]; k++)
        -: 1181:  			{
        -: 1182:  			  if (DEBUG)
        -: 1183:  			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1184:  			}	
    #####: 1185:  		      break;
        -: 1186:  		    }		
        -: 1187:  		}
        -: 1188:  					
        -: 1189:  	    }
        -: 1190:  				
        -: 1191:  	}				
        -: 1192:
        -: 1193:        //discard played card from hand
    #####: 1194:        discardCard(handPos, currentPlayer, state, 0);			
        -: 1195:
    #####: 1196:        return 0;
        -: 1197:
        -: 1198:  		
        -: 1199:      case embargo: 
        -: 1200:        //+2 Coins
    #####: 1201:        state->coins = state->coins + 2;
        -: 1202:  			
        -: 1203:        //see if selected pile is in play
    #####: 1204:        if ( state->supplyCount[choice1] == -1 )
        -: 1205:  	{
    #####: 1206:  	  return -1;
        -: 1207:  	}
        -: 1208:  			
        -: 1209:        //add embargo token to selected supply pile
    #####: 1210:        state->embargoTokens[choice1]++;
        -: 1211:  			
        -: 1212:        //trash card
    #####: 1213:        discardCard(handPos, currentPlayer, state, 1);		
    #####: 1214:        return 0;
        -: 1215:  		
        -: 1216:      case outpost:
        -: 1217:        //set outpost flag
    #####: 1218:        state->outpostPlayed++;
        -: 1219:  			
        -: 1220:        //discard card
    #####: 1221:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1222:        return 0;
        -: 1223:  		
        -: 1224:      case salvager:
        -: 1225:        //+1 buy
    #####: 1226:        state->numBuys++;
        -: 1227:  			
    #####: 1228:        if (choice1)
        -: 1229:  	{
        -: 1230:  	  //gain coins equal to trashed card
    #####: 1231:  	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1232:  	  //trash card
    #####: 1233:  	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1234:  	}
        -: 1235:  			
        -: 1236:        //discard card
    #####: 1237:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1238:        return 0;
        -: 1239:  		
        -: 1240:      
        -: 1241:  		
        -: 1242:      case treasure_map:
        -: 1243:        //search hand for another treasure_map
    #####: 1244:        index = -1;
    #####: 1245:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1246:  	{
    #####: 1247:  	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1248:  	    {
    #####: 1249:  	      index = i;
    #####: 1250:  	      break;
        -: 1251:  	    }
        -: 1252:  	}
    #####: 1253:        if (index > -1)
        -: 1254:  	{
        -: 1255:  	  //trash both treasure cards
    #####: 1256:  	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1257:  	  discardCard(index, currentPlayer, state, 1);
        -: 1258:
        -: 1259:  	  //gain 4 Gold cards
    #####: 1260:  	  for (i = 0; i < 4; i++)
        -: 1261:  	    {
    #####: 1262:  	      gainCard(gold, state, 1, currentPlayer);
        -: 1263:  	    }
        -: 1264:  				
        -: 1265:  	  //return success
    #####: 1266:  	  return 1;
        -: 1267:  	}
        -: 1268:  			
        -: 1269:        //no second treasure_map found in hand
    #####: 1270:        return -1;
        -: 1271:      }
        -: 1272:    }
        -: 1273:	
    #####: 1274:  return -1;
        -: 1275:}
        -: 1276:
    40000: 1277:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1278:{
        -: 1279:	
        -: 1280:  //if card is not trashed, added to Played pile 
    40000: 1281:  if (trashFlag < 1)
        -: 1282:    {
        -: 1283:      //add card to played pile
    40000: 1284:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    40000: 1285:      state->playedCardCount++;
        -: 1286:    }
        -: 1287:	
        -: 1288:  //set played card to -1
    40000: 1289:  state->hand[currentPlayer][handPos] = -1;
        -: 1290:	
        -: 1291:  //remove card from player's hand
    40000: 1292:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1293:    {
        -: 1294:      //reduce number of cards in hand
      162: 1295:      state->handCount[currentPlayer]--;
        -: 1296:    }
    39838: 1297:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1298:    {
        -: 1299:      //reduce number of cards in hand
       48: 1300:      state->handCount[currentPlayer]--;
        -: 1301:    }
        -: 1302:  else 	
        -: 1303:    {
        -: 1304:      //replace discarded card with last card in hand
    39790: 1305:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1306:      //set last card to -1
    39790: 1307:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1308:      //reduce number of cards in hand
    39790: 1309:      state->handCount[currentPlayer]--;
        -: 1310:    }
        -: 1311:	
    40000: 1312:  return 0;
        -: 1313:}
        -: 1314:
    #####: 1315:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1316:{
        -: 1317:  //Note: supplyPos is enum of choosen card
        -: 1318:	
        -: 1319:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1320:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1321:    {
    #####: 1322:      return -1;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //added card for [whoseTurn] current player:
        -: 1326:  // toFlag = 0 : add to discard
        -: 1327:  // toFlag = 1 : add to deck
        -: 1328:  // toFlag = 2 : add to hand
        -: 1329:
    #####: 1330:  if (toFlag == 1)
        -: 1331:    {
    #####: 1332:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1333:      state->deckCount[player]++;
        -: 1334:    }
    #####: 1335:  else if (toFlag == 2)
        -: 1336:    {
    #####: 1337:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1338:      state->handCount[player]++;
        -: 1339:    }
        -: 1340:  else
        -: 1341:    {
    #####: 1342:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1343:      state->discardCount[player]++;
        -: 1344:    }
        -: 1345:	
        -: 1346:  //decrease number in supply pile
    #####: 1347:  state->supplyCount[supplyPos]--;
        -: 1348:	 
    #####: 1349:  return 0;
        -: 1350:}
        -: 1351:
    #####: 1352:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1353:{
        -: 1354:  int i;
        -: 1355:	
        -: 1356:  //reset coin count
    #####: 1357:  state->coins = 0;
        -: 1358:
        -: 1359:  //add coins for each Treasure card in player's hand
    #####: 1360:  for (i = 0; i < state->handCount[player]; i++)
        -: 1361:    {
    #####: 1362:      if (state->hand[player][i] == copper)
        -: 1363:	{
    #####: 1364:	  state->coins += 1;
        -: 1365:	}
    #####: 1366:      else if (state->hand[player][i] == silver)
        -: 1367:	{
    #####: 1368:	  state->coins += 2;
        -: 1369:	}
    #####: 1370:      else if (state->hand[player][i] == gold)
        -: 1371:	{
    #####: 1372:	  state->coins += 3;
        -: 1373:	}	
        -: 1374:    }	
        -: 1375:
        -: 1376:  //add bonus
    #####: 1377:  state->coins += bonus;
        -: 1378:
    #####: 1379:  return 0;
        -: 1380:}
        -: 1381:
        -: 1382:
        -: 1383://end of dominion.c
        -: 1384:
