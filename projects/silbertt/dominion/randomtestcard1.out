CARD TEST 1 RESULTS:
RANDOM TEST 1 - 'SMITHY' - CARD FUNCTION

ERROR ON HAND COUNT ON TEST 115

PLAYERS 3
PLAYER TURN 0
HAND BEFORE 24
DECK BEFORE 0
HAND AFTER 24
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 115

PLAYERS 3
PLAYER TURN 0
HAND BEFORE 24
DECK BEFORE 0
HAND AFTER 24
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 215

PLAYERS 3
PLAYER TURN 0
HAND BEFORE 353
DECK BEFORE 2
HAND AFTER 354
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 215

PLAYERS 3
PLAYER TURN 0
HAND BEFORE 353
DECK BEFORE 2
HAND AFTER 354
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 300

PLAYERS 4
PLAYER TURN 0
HAND BEFORE 216
DECK BEFORE 2
HAND AFTER 217
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 300

PLAYERS 4
PLAYER TURN 0
HAND BEFORE 216
DECK BEFORE 2
HAND AFTER 217
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 374

PLAYERS 4
PLAYER TURN 0
HAND BEFORE 408
DECK BEFORE 2
HAND AFTER 409
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 374

PLAYERS 4
PLAYER TURN 0
HAND BEFORE 408
DECK BEFORE 2
HAND AFTER 409
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 632

PLAYERS 4
PLAYER TURN 0
HAND BEFORE 154
DECK BEFORE 1
HAND AFTER 154
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 632

PLAYERS 4
PLAYER TURN 0
HAND BEFORE 154
DECK BEFORE 1
HAND AFTER 154
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 1026

PLAYERS 3
PLAYER TURN 2
HAND BEFORE 337
DECK BEFORE 1
HAND AFTER 337
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 1026

PLAYERS 3
PLAYER TURN 2
HAND BEFORE 337
DECK BEFORE 1
HAND AFTER 337
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 1049

PLAYERS 4
PLAYER TURN 3
HAND BEFORE 206
DECK BEFORE 0
HAND AFTER 205
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 1049

PLAYERS 4
PLAYER TURN 3
HAND BEFORE 206
DECK BEFORE 0
HAND AFTER 205
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 1067

PLAYERS 4
PLAYER TURN 3
HAND BEFORE 114
DECK BEFORE 2
HAND AFTER 115
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 1067

PLAYERS 4
PLAYER TURN 3
HAND BEFORE 114
DECK BEFORE 2
HAND AFTER 115
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 1392

PLAYERS 3
PLAYER TURN 1
HAND BEFORE 238
DECK BEFORE 2
HAND AFTER 239
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 1392

PLAYERS 3
PLAYER TURN 1
HAND BEFORE 238
DECK BEFORE 2
HAND AFTER 239
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 1451

PLAYERS 4
PLAYER TURN 0
HAND BEFORE 126
DECK BEFORE 0
HAND AFTER 125
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 1451

PLAYERS 4
PLAYER TURN 0
HAND BEFORE 126
DECK BEFORE 0
HAND AFTER 125
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 1482

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 344
DECK BEFORE 2
HAND AFTER 345
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 1482

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 344
DECK BEFORE 2
HAND AFTER 345
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 1609

PLAYERS 2
PLAYER TURN 1
HAND BEFORE 275
DECK BEFORE 2
HAND AFTER 276
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 1609

PLAYERS 2
PLAYER TURN 1
HAND BEFORE 275
DECK BEFORE 2
HAND AFTER 276
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 1645

PLAYERS 3
PLAYER TURN 2
HAND BEFORE 317
DECK BEFORE 2
HAND AFTER 318
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 1645

PLAYERS 3
PLAYER TURN 2
HAND BEFORE 317
DECK BEFORE 2
HAND AFTER 318
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 1740

PLAYERS 3
PLAYER TURN 2
HAND BEFORE 110
DECK BEFORE 2
HAND AFTER 111
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 1740

PLAYERS 3
PLAYER TURN 2
HAND BEFORE 110
DECK BEFORE 2
HAND AFTER 111
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 1767

PLAYERS 2
PLAYER TURN 1
HAND BEFORE 24
DECK BEFORE 1
HAND AFTER 24
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 1767

PLAYERS 2
PLAYER TURN 1
HAND BEFORE 24
DECK BEFORE 1
HAND AFTER 24
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 1777

PLAYERS 3
PLAYER TURN 0
HAND BEFORE 328
DECK BEFORE 2
HAND AFTER 329
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 1777

PLAYERS 3
PLAYER TURN 0
HAND BEFORE 328
DECK BEFORE 2
HAND AFTER 329
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 1964

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 429
DECK BEFORE 1
HAND AFTER 429
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 1964

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 429
DECK BEFORE 1
HAND AFTER 429
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 2198

PLAYERS 4
PLAYER TURN 1
HAND BEFORE 25
DECK BEFORE 2
HAND AFTER 26
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 2198

PLAYERS 4
PLAYER TURN 1
HAND BEFORE 25
DECK BEFORE 2
HAND AFTER 26
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 2230

PLAYERS 2
PLAYER TURN 1
HAND BEFORE 495
DECK BEFORE 1
HAND AFTER 495
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 2230

PLAYERS 2
PLAYER TURN 1
HAND BEFORE 495
DECK BEFORE 1
HAND AFTER 495
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 2440

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 424
DECK BEFORE 0
HAND AFTER 423
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 2440

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 424
DECK BEFORE 0
HAND AFTER 423
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 2485

PLAYERS 2
PLAYER TURN 1
HAND BEFORE 305
DECK BEFORE 0
HAND AFTER 304
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 2485

PLAYERS 2
PLAYER TURN 1
HAND BEFORE 305
DECK BEFORE 0
HAND AFTER 304
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 2645

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 241
DECK BEFORE 0
HAND AFTER 240
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 2645

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 241
DECK BEFORE 0
HAND AFTER 240
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 2760

PLAYERS 3
PLAYER TURN 1
HAND BEFORE 113
DECK BEFORE 0
HAND AFTER 112
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 2760

PLAYERS 3
PLAYER TURN 1
HAND BEFORE 113
DECK BEFORE 0
HAND AFTER 112
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 2904

PLAYERS 4
PLAYER TURN 0
HAND BEFORE 375
DECK BEFORE 2
HAND AFTER 376
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 2904

PLAYERS 4
PLAYER TURN 0
HAND BEFORE 375
DECK BEFORE 2
HAND AFTER 376
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 3201

PLAYERS 2
PLAYER TURN 1
HAND BEFORE 70
DECK BEFORE 0
HAND AFTER 69
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 3201

PLAYERS 2
PLAYER TURN 1
HAND BEFORE 70
DECK BEFORE 0
HAND AFTER 69
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 3271

PLAYERS 4
PLAYER TURN 0
HAND BEFORE 41
DECK BEFORE 2
HAND AFTER 42
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 3271

PLAYERS 4
PLAYER TURN 0
HAND BEFORE 41
DECK BEFORE 2
HAND AFTER 42
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 3338

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 179
DECK BEFORE 1
HAND AFTER 179
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 3338

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 179
DECK BEFORE 1
HAND AFTER 179
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 3396

PLAYERS 3
PLAYER TURN 0
HAND BEFORE 461
DECK BEFORE 1
HAND AFTER 461
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 3396

PLAYERS 3
PLAYER TURN 0
HAND BEFORE 461
DECK BEFORE 1
HAND AFTER 461
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 3432

PLAYERS 4
PLAYER TURN 2
HAND BEFORE 56
DECK BEFORE 0
HAND AFTER 55
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 3432

PLAYERS 4
PLAYER TURN 2
HAND BEFORE 56
DECK BEFORE 0
HAND AFTER 55
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 3563

PLAYERS 4
PLAYER TURN 2
HAND BEFORE 366
DECK BEFORE 1
HAND AFTER 366
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 3563

PLAYERS 4
PLAYER TURN 2
HAND BEFORE 366
DECK BEFORE 1
HAND AFTER 366
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 3651

PLAYERS 3
PLAYER TURN 1
HAND BEFORE 405
DECK BEFORE 1
HAND AFTER 405
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 3651

PLAYERS 3
PLAYER TURN 1
HAND BEFORE 405
DECK BEFORE 1
HAND AFTER 405
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 3799

PLAYERS 3
PLAYER TURN 0
HAND BEFORE 160
DECK BEFORE 2
HAND AFTER 161
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 3799

PLAYERS 3
PLAYER TURN 0
HAND BEFORE 160
DECK BEFORE 2
HAND AFTER 161
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 3923

PLAYERS 4
PLAYER TURN 3
HAND BEFORE 348
DECK BEFORE 0
HAND AFTER 347
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 3923

PLAYERS 4
PLAYER TURN 3
HAND BEFORE 348
DECK BEFORE 0
HAND AFTER 347
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 3994

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 187
DECK BEFORE 1
HAND AFTER 187
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 3994

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 187
DECK BEFORE 1
HAND AFTER 187
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 4171

PLAYERS 3
PLAYER TURN 1
HAND BEFORE 464
DECK BEFORE 2
HAND AFTER 465
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 4171

PLAYERS 3
PLAYER TURN 1
HAND BEFORE 464
DECK BEFORE 2
HAND AFTER 465
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 4247

PLAYERS 4
PLAYER TURN 3
HAND BEFORE 36
DECK BEFORE 1
HAND AFTER 36
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 4247

PLAYERS 4
PLAYER TURN 3
HAND BEFORE 36
DECK BEFORE 1
HAND AFTER 36
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 4341

PLAYERS 4
PLAYER TURN 3
HAND BEFORE 249
DECK BEFORE 2
HAND AFTER 250
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 4341

PLAYERS 4
PLAYER TURN 3
HAND BEFORE 249
DECK BEFORE 2
HAND AFTER 250
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 4887

PLAYERS 4
PLAYER TURN 2
HAND BEFORE 318
DECK BEFORE 1
HAND AFTER 318
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 4887

PLAYERS 4
PLAYER TURN 2
HAND BEFORE 318
DECK BEFORE 1
HAND AFTER 318
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 5288

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 267
DECK BEFORE 2
HAND AFTER 268
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 5288

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 267
DECK BEFORE 2
HAND AFTER 268
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 5436

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 66
DECK BEFORE 0
HAND AFTER 65
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 5436

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 66
DECK BEFORE 0
HAND AFTER 65
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 5747

PLAYERS 3
PLAYER TURN 0
HAND BEFORE 132
DECK BEFORE 0
HAND AFTER 131
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 5747

PLAYERS 3
PLAYER TURN 0
HAND BEFORE 132
DECK BEFORE 0
HAND AFTER 131
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 5951

PLAYERS 4
PLAYER TURN 0
HAND BEFORE 70
DECK BEFORE 0
HAND AFTER 69
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 5951

PLAYERS 4
PLAYER TURN 0
HAND BEFORE 70
DECK BEFORE 0
HAND AFTER 69
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 6090

PLAYERS 4
PLAYER TURN 1
HAND BEFORE 256
DECK BEFORE 0
HAND AFTER 255
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 6090

PLAYERS 4
PLAYER TURN 1
HAND BEFORE 256
DECK BEFORE 0
HAND AFTER 255
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 6117

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 193
DECK BEFORE 2
HAND AFTER 194
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 6117

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 193
DECK BEFORE 2
HAND AFTER 194
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 6474

PLAYERS 2
PLAYER TURN 1
HAND BEFORE 290
DECK BEFORE 0
HAND AFTER 289
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 6474

PLAYERS 2
PLAYER TURN 1
HAND BEFORE 290
DECK BEFORE 0
HAND AFTER 289
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 6583

PLAYERS 3
PLAYER TURN 1
HAND BEFORE 113
DECK BEFORE 2
HAND AFTER 114
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 6583

PLAYERS 3
PLAYER TURN 1
HAND BEFORE 113
DECK BEFORE 2
HAND AFTER 114
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 7583

PLAYERS 3
PLAYER TURN 0
HAND BEFORE 37
DECK BEFORE 1
HAND AFTER 37
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 7583

PLAYERS 3
PLAYER TURN 0
HAND BEFORE 37
DECK BEFORE 1
HAND AFTER 37
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 7609

PLAYERS 2
PLAYER TURN 1
HAND BEFORE 177
DECK BEFORE 1
HAND AFTER 177
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 7609

PLAYERS 2
PLAYER TURN 1
HAND BEFORE 177
DECK BEFORE 1
HAND AFTER 177
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 7670

PLAYERS 4
PLAYER TURN 1
HAND BEFORE 460
DECK BEFORE 1
HAND AFTER 460
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 7670

PLAYERS 4
PLAYER TURN 1
HAND BEFORE 460
DECK BEFORE 1
HAND AFTER 460
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 7680

PLAYERS 4
PLAYER TURN 2
HAND BEFORE 219
DECK BEFORE 1
HAND AFTER 219
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 7680

PLAYERS 4
PLAYER TURN 2
HAND BEFORE 219
DECK BEFORE 1
HAND AFTER 219
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 7800

PLAYERS 3
PLAYER TURN 1
HAND BEFORE 300
DECK BEFORE 2
HAND AFTER 301
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 7800

PLAYERS 3
PLAYER TURN 1
HAND BEFORE 300
DECK BEFORE 2
HAND AFTER 301
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 7986

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 188
DECK BEFORE 2
HAND AFTER 189
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 7986

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 188
DECK BEFORE 2
HAND AFTER 189
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 8185

PLAYERS 4
PLAYER TURN 2
HAND BEFORE 398
DECK BEFORE 0
HAND AFTER 397
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 8185

PLAYERS 4
PLAYER TURN 2
HAND BEFORE 398
DECK BEFORE 0
HAND AFTER 397
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 8266

PLAYERS 3
PLAYER TURN 1
HAND BEFORE 483
DECK BEFORE 2
HAND AFTER 484
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 8266

PLAYERS 3
PLAYER TURN 1
HAND BEFORE 483
DECK BEFORE 2
HAND AFTER 484
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 8540

PLAYERS 2
PLAYER TURN 1
HAND BEFORE 370
DECK BEFORE 1
HAND AFTER 370
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 8540

PLAYERS 2
PLAYER TURN 1
HAND BEFORE 370
DECK BEFORE 1
HAND AFTER 370
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 8562

PLAYERS 4
PLAYER TURN 0
HAND BEFORE 165
DECK BEFORE 1
HAND AFTER 165
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 8562

PLAYERS 4
PLAYER TURN 0
HAND BEFORE 165
DECK BEFORE 1
HAND AFTER 165
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 8622

PLAYERS 4
PLAYER TURN 1
HAND BEFORE 31
DECK BEFORE 2
HAND AFTER 32
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 8622

PLAYERS 4
PLAYER TURN 1
HAND BEFORE 31
DECK BEFORE 2
HAND AFTER 32
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 9138

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 299
DECK BEFORE 2
HAND AFTER 300
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 9138

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 299
DECK BEFORE 2
HAND AFTER 300
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 9257

PLAYERS 4
PLAYER TURN 3
HAND BEFORE 476
DECK BEFORE 2
HAND AFTER 477
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 9257

PLAYERS 4
PLAYER TURN 3
HAND BEFORE 476
DECK BEFORE 2
HAND AFTER 477
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 9493

PLAYERS 2
PLAYER TURN 1
HAND BEFORE 486
DECK BEFORE 2
HAND AFTER 487
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 9493

PLAYERS 2
PLAYER TURN 1
HAND BEFORE 486
DECK BEFORE 2
HAND AFTER 487
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 9612

PLAYERS 3
PLAYER TURN 0
HAND BEFORE 87
DECK BEFORE 0
HAND AFTER 86
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 9612

PLAYERS 3
PLAYER TURN 0
HAND BEFORE 87
DECK BEFORE 0
HAND AFTER 86
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 9622

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 286
DECK BEFORE 2
HAND AFTER 287
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 9622

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 286
DECK BEFORE 2
HAND AFTER 287
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 9648

PLAYERS 3
PLAYER TURN 2
HAND BEFORE 455
DECK BEFORE 0
HAND AFTER 454
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 9648

PLAYERS 3
PLAYER TURN 2
HAND BEFORE 455
DECK BEFORE 0
HAND AFTER 454
DECK AFTER 0
ERROR ON HAND COUNT ON TEST 9917

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 42
DECK BEFORE 1
HAND AFTER 42
DECK AFTER 0
ERROR ON DECK COUNT ON TEST 9917

PLAYERS 2
PLAYER TURN 0
HAND BEFORE 42
DECK BEFORE 1
HAND AFTER 42
DECK AFTER 0
*****SMITHY CARD FAILED*****

File 'dominion.c'
Lines executed:37.37% of 562
Branches executed:40.53% of 417
Taken at least once:31.89% of 417
Calls executed:23.16% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   236700:    8:int compare(const void* a, const void* b) {
   236700:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
   236700:   11:  if (*(int*)a < *(int*)b)
    63120:   12:    return -1;
   173580:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     7520:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     7520:   44:  SelectStream(1);
     7520:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     7520:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
     2360:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     5160:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    56760:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   567600:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   516000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     5160:   73:  if (numPlayers == 2)
        -:   74:    {
     1620:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     3540:   77:  else if (numPlayers == 3)
        -:   78:    {
     1620:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
     1920:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     5160:   87:  if (numPlayers == 2)
        -:   88:    {
     1620:   89:      state->supplyCount[estate] = 8;
     1620:   90:      state->supplyCount[duchy] = 8;
     1620:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     3540:   95:      state->supplyCount[estate] = 12;
     3540:   96:      state->supplyCount[duchy] = 12;
     3540:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     5160:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     5160:  102:  state->supplyCount[silver] = 40;
     5160:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   108360:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   851400:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   799800:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    51600:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      360:  115:		  if (numPlayers == 2){ 
       60:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      120:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    51420:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    51600:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   748200:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    20940:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    15780:  140:      state->deckCount[i] = 0;
    63120:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    47340:  143:	  state->deck[i][j] = estate;
    47340:  144:	  state->deckCount[i]++;
        -:  145:	}
   126240:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
   110460:  148:	  state->deck[i][j] = copper;
   110460:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    20940:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    15780:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    20940:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    15780:  166:      state->handCount[i] = 0;
    15780:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   144480:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   139320:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     5160:  182:  state->outpostPlayed = 0;
     5160:  183:  state->phase = 0;
     5160:  184:  state->numActions = 1;
     5160:  185:  state->numBuys = 1;
     5160:  186:  state->playedCardCount = 0;
     5160:  187:  state->whoseTurn = 0;
     5160:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    30960:  192:  for (it = 0; it < 5; it++){
    25800:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     5160:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     5160:  198:  return 0;
        -:  199:}
        -:  200:
    16363:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    16363:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    16363:  209:  if (state->deckCount[player] < 1)
      583:  210:    return -1;
    15780:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   189360:  214:  while (state->deckCount[player] > 0) {
   157800:  215:    card = floor(Random() * state->deckCount[player]);
   157800:  216:    newDeck[newDeckPos] = state->deck[player][card];
   157800:  217:    newDeckPos++;
   533024:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   375224:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   157800:  221:    state->deckCount[player]--;
        -:  222:  }
   173580:  223:  for (i = 0; i < newDeckPos; i++) {
   157800:  224:    state->deck[player][i] = newDeck[i];
   157800:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    15780:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
     1500:  311:int numHandCards(struct gameState *state) {
     1500:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
     5000:  320:int supplyCount(int card, struct gameState *state) {
     5000:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        6:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        6:  326:  int count = 0;
        -:  327:
       24:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
       18:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
       24:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
       18:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
       24:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
       18:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
        6:  343:  return count;
        -:  344:}
        -:  345:
     2520:  346:int whoseTurn(struct gameState *state) {
     2520:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
        4:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        4:  420:  int score = 0;
        -:  421:  //score from hand
       16:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
       12:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
       12:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
       12:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
       12:  427:      if (state->hand[player][i] == province) { score = score + 6; };
       12:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       12:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       16:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
       12:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
       12:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
       12:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
       12:  438:      if (state->discard[player][i] == province) { score = score + 6; };
       12:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       12:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       16:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
       12:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
       12:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
       12:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
       12:  449:      if (state->deck[player][i] == province) { score = score + 6; };
       12:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       12:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
        4:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    57600:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    57600:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     8471:  533:    for (i = 0; i < state->discardCount[player];i++){
     8004:  534:      state->deck[player][i] = state->discard[player][i];
     8004:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      467:  538:    state->deckCount[player] = state->discardCount[player];
      467:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      467:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      467:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      467:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      467:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      467:  559:    if (deckCounter == 0)
      461:  560:      return -1;
        -:  561:
        6:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        6:  563:    state->deckCount[player]--;
        6:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    57133:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    57133:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    57133:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    57133:  576:    state->deckCount[player]--;
    57133:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    57139:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
     1020:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
     1020:  653:  int currentPlayer = whoseTurn(state);
     1020:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
     1020:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
     1020:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
     1020:  660:  int z = 0;// this is the counter for the temp hand
     1020:  661:  if (nextPlayer > (state->numPlayers - 1)){
      360:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
     1020:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
        -:  670:          // call function instead of below commented out code
      300:  671:          return adventurerPlay(currentPlayer, state, temphand);
        -:  672:          //return functionReturn;
        -:  673:    /*  while(drawntreasure<2){
        -:  674:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  675:	  shuffle(currentPlayer, state);
        -:  676:	}
        -:  677:	drawCard(currentPlayer, state);
        -:  678:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  679:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  680:	  drawntreasure++;
        -:  681:	else{
        -:  682:	  temphand[z]=cardDrawn;
        -:  683:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  684:	  z++;
        -:  685:	}
        -:  686:      }
        -:  687:      while(z-1>=0){
        -:  688:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  689:	z=z-1;
        -:  690:      }
        -:  691:      return 0;
        -:  692:      */
        -:  693:    
        -:  694:
        -:  695:			
        -:  696:    case council_room:
        -:  697:      //+4 Cards
    #####:  698:      for (i = 0; i < 4; i++)
        -:  699:	{
    #####:  700:	  drawCard(currentPlayer, state);
        -:  701:	}
        -:  702:			
        -:  703:      //+1 Buy
    #####:  704:      state->numBuys++;
        -:  705:			
        -:  706:      //Each other player draws a card
    #####:  707:      for (i = 0; i < state->numPlayers; i++)
        -:  708:	{
    #####:  709:	  if ( i != currentPlayer )
        -:  710:	    {
    #####:  711:	      drawCard(i, state);
        -:  712:	    }
        -:  713:	}
        -:  714:			
        -:  715:      //put played card in played card pile
    #####:  716:      discardCard(handPos, currentPlayer, state, 0);
        -:  717:			
    #####:  718:      return 0;
        -:  719:			
        -:  720:    case feast:
        -:  721:      //gain card with cost up to 5
        -:  722:      //Backup hand
    #####:  723:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  724:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  725:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  726:      }
        -:  727:      //Backup hand
        -:  728:
        -:  729:      //Update Coins for Buy
    #####:  730:      updateCoins(currentPlayer, state, 5);
    #####:  731:      x = 1;//Condition to loop on
    #####:  732:      while( x == 1) {//Buy one card
    #####:  733:	if (supplyCount(choice1, state) <= 0){
        -:  734:	  if (DEBUG)
        -:  735:	    printf("None of that card left, sorry!\n");
        -:  736:
        -:  737:	  if (DEBUG){
        -:  738:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  739:	  }
        -:  740:	}
    #####:  741:	else if (state->coins < getCost(choice1)){
    #####:  742:	  printf("That card is too expensive!\n");
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  746:	  }
        -:  747:	}
        -:  748:	else{
        -:  749:
        -:  750:	  if (DEBUG){
        -:  751:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  752:	  }
        -:  753:
    #####:  754:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  755:	  x = 0;//No more buying cards
        -:  756:
        -:  757:	  if (DEBUG){
        -:  758:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  759:	  }
        -:  760:
        -:  761:	}
        -:  762:      }     
        -:  763:
        -:  764:      //Reset Hand
    #####:  765:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  766:	state->hand[currentPlayer][i] = temphand[i];
    #####:  767:	temphand[i] = -1;
        -:  768:      }
        -:  769:      //Reset Hand
        -:  770:      			
    #####:  771:      return 0;
        -:  772:			
        -:  773:    case gardens:
    #####:  774:      return -1;
        -:  775:			
        -:  776:    case mine:
    #####:  777:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  778:
    #####:  779:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  780:	{
    #####:  781:	  return -1;
        -:  782:	}
        -:  783:		
    #####:  784:      if (choice2 > treasure_map || choice2 < curse)
        -:  785:	{
    #####:  786:	  return -1;
        -:  787:	}
        -:  788:
    #####:  789:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  790:	{
    #####:  791:	  return -1;
        -:  792:	}
        -:  793:
    #####:  794:      gainCard(choice2, state, 2, currentPlayer);
        -:  795:
        -:  796:      //discard card from hand
    #####:  797:      discardCard(handPos, currentPlayer, state, 0);
        -:  798:
        -:  799:      //discard trashed card
    #####:  800:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  801:	{
    #####:  802:	  if (state->hand[currentPlayer][i] == j)
        -:  803:	    {
    #####:  804:	      discardCard(i, currentPlayer, state, 0);			
    #####:  805:	      break;
        -:  806:	    }
        -:  807:	}
        -:  808:			
    #####:  809:      return 0;
        -:  810:			
        -:  811:    case remodel:
    #####:  812:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  813:
    #####:  814:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  815:	{
    #####:  816:	  return -1;
        -:  817:	}
        -:  818:
    #####:  819:      gainCard(choice2, state, 0, currentPlayer);
        -:  820:
        -:  821:      //discard card from hand
    #####:  822:      discardCard(handPos, currentPlayer, state, 0);
        -:  823:
        -:  824:      //discard trashed card
    #####:  825:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  826:	{
    #####:  827:	  if (state->hand[currentPlayer][i] == j)
        -:  828:	    {
    #####:  829:	      discardCard(i, currentPlayer, state, 0);			
    #####:  830:	      break;
        -:  831:	    }
        -:  832:	}
        -:  833:
        -:  834:
    #####:  835:      return 0;
        -:  836:		
        -:  837:      case smithy:
        -:  838:          //call new function
      300:  839:          return smithyPlay(currentPlayer, state, handPos);
        -:  840:          
        -:  841:        /*  
        -:  842:      //+3 Cards
        -:  843:      for (i = 0; i < 3; i++)
        -:  844:	{
        -:  845:	  drawCard(currentPlayer, state);
        -:  846:	}
        -:  847:			
        -:  848:      //discard card from hand
        -:  849:      discardCard(handPos, currentPlayer, state, 0);
        -:  850:      return 0;
        -:  851:    */      
        -:  852:    //new function for smithy card
        -:  853:    
        -:  854:		
        -:  855:    case village:
        -:  856:      //+1 Card
      120:  857:      drawCard(currentPlayer, state);
        -:  858:			
        -:  859:      //+2 Actions
      120:  860:      state->numActions = state->numActions + 2;
        -:  861:			
        -:  862:      //discard played card from hand
      120:  863:      discardCard(handPos, currentPlayer, state, 0);
      120:  864:      return 0;
        -:  865:		
        -:  866:    case baron:
    #####:  867:      state->numBuys++;//Increase buys by 1!
    #####:  868:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  869:	int p = 0;//Iterator for hand!
    #####:  870:	int card_not_discarded = 1;//Flag for discard set!
    #####:  871:	while(card_not_discarded){
    #####:  872:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  873:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  874:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  875:	    state->discardCount[currentPlayer]++;
    #####:  876:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  877:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  878:	    }
    #####:  879:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  880:	    state->handCount[currentPlayer]--;
    #####:  881:	    card_not_discarded = 0;//Exit the loop
        -:  882:	  }
    #####:  883:	  else if (p > state->handCount[currentPlayer]){
        -:  884:	    if(DEBUG) {
        -:  885:	      printf("No estate cards in your hand, invalid choice\n");
        -:  886:	      printf("Must gain an estate if there are any\n");
        -:  887:	    }
    #####:  888:	    if (supplyCount(estate, state) > 0){
    #####:  889:	      gainCard(estate, state, 0, currentPlayer);
    #####:  890:	      state->supplyCount[estate]--;//Decrement estates
    #####:  891:	      if (supplyCount(estate, state) == 0){
    #####:  892:		isGameOver(state);
        -:  893:	      }
        -:  894:	    }
    #####:  895:	    card_not_discarded = 0;//Exit the loop
        -:  896:	  }
        -:  897:			    
        -:  898:	  else{
    #####:  899:	    p++;//Next card
        -:  900:	  }
        -:  901:	}
        -:  902:      }
        -:  903:			    
        -:  904:      else{
    #####:  905:	if (supplyCount(estate, state) > 0){
    #####:  906:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  907:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  908:	  if (supplyCount(estate, state) == 0){
    #####:  909:	    isGameOver(state);
        -:  910:	  }
        -:  911:	}
        -:  912:      }
        -:  913:	    
        -:  914:      
    #####:  915:      return 0;
        -:  916:		
        -:  917:    case great_hall:
      300:  918:       return great_hallPlay(currentPlayer, state, handPos);
        -:  919:      /*//+1 Card
        -:  920:      drawCard(currentPlayer, state);
        -:  921:			
        -:  922:      //+1 Actions
        -:  923:      state->numActions++;
        -:  924:			
        -:  925:      //discard card from hand
        -:  926:      discardCard(handPos, currentPlayer, state, 0);
        -:  927:      return 0;*/
        -:  928:		
        -:  929:    case minion:
        -:  930:      //+1 action
    #####:  931:      state->numActions++;
        -:  932:			
        -:  933:      //discard card from hand
    #####:  934:      discardCard(handPos, currentPlayer, state, 0);
        -:  935:			
    #####:  936:      if (choice1)		//+2 coins
        -:  937:	{
    #####:  938:	  state->coins = state->coins + 2;
        -:  939:	}
        -:  940:			
    #####:  941:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  942:	{
        -:  943:	  //discard hand
    #####:  944:	  while(numHandCards(state) > 0)
        -:  945:	    {
    #####:  946:	      discardCard(handPos, currentPlayer, state, 0);
        -:  947:	    }
        -:  948:				
        -:  949:	  //draw 4
    #####:  950:	  for (i = 0; i < 4; i++)
        -:  951:	    {
    #####:  952:	      drawCard(currentPlayer, state);
        -:  953:	    }
        -:  954:				
        -:  955:	  //other players discard hand and redraw if hand size > 4
    #####:  956:	  for (i = 0; i < state->numPlayers; i++)
        -:  957:	    {
    #####:  958:	      if (i != currentPlayer)
        -:  959:		{
    #####:  960:		  if ( state->handCount[i] > 4 )
        -:  961:		    {
        -:  962:		      //discard hand
    #####:  963:		      while( state->handCount[i] > 0 )
        -:  964:			{
    #####:  965:			  discardCard(handPos, i, state, 0);
        -:  966:			}
        -:  967:							
        -:  968:		      //draw 4
    #####:  969:		      for (j = 0; j < 4; j++)
        -:  970:			{
    #####:  971:			  drawCard(i, state);
        -:  972:			}
        -:  973:		    }
        -:  974:		}
        -:  975:	    }
        -:  976:				
        -:  977:	}
    #####:  978:      return 0;
        -:  979:		
        -:  980:    case steward:
    #####:  981:      if (choice1 == 1)
        -:  982:	{
        -:  983:	  //+2 cards
    #####:  984:	  drawCard(currentPlayer, state);
    #####:  985:	  drawCard(currentPlayer, state);
        -:  986:	}
    #####:  987:      else if (choice1 == 2)
        -:  988:	{
        -:  989:	  //+2 coins
    #####:  990:	  state->coins = state->coins + 2;
        -:  991:	}
        -:  992:      else
        -:  993:	{
        -:  994:	  //trash 2 cards in hand
    #####:  995:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  996:	  discardCard(choice3, currentPlayer, state, 1);
        -:  997:	}
        -:  998:			
        -:  999:      //discard card from hand
    #####: 1000:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case tribute:
    #####: 1004:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1005:	if (state->deckCount[nextPlayer] > 0){
    #####: 1006:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	  state->deckCount[nextPlayer]--;
        -: 1008:	}
    #####: 1009:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1010:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1011:	  state->discardCount[nextPlayer]--;
        -: 1012:	}
        -: 1013:	else{
        -: 1014:	  //No Card to Reveal
        -: 1015:	  if (DEBUG){
        -: 1016:	    printf("No cards to reveal\n");
        -: 1017:	  }
        -: 1018:	}
        -: 1019:      }
        -: 1020:	    
        -: 1021:      else{
    #####: 1022:	if (state->deckCount[nextPlayer] == 0){
    #####: 1023:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1024:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1025:	    state->deckCount[nextPlayer]++;
    #####: 1026:	    state->discard[nextPlayer][i] = -1;
    #####: 1027:	    state->discardCount[nextPlayer]--;
        -: 1028:	  }
        -: 1029:			    
    #####: 1030:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1031:	} 
    #####: 1032:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1034:	state->deckCount[nextPlayer]--;
    #####: 1035:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
        -: 1038:      }    
        -: 1039:		       
    #####: 1040:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1041:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1042:	state->playedCardCount++;
    #####: 1043:	tributeRevealedCards[1] = -1;
        -: 1044:      }
        -: 1045:
    #####: 1046:      for (i = 0; i <= 2; i ++){
    #####: 1047:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1048:	  state->coins += 2;
        -: 1049:	}
        -: 1050:		    
    #####: 1051:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1052:	  drawCard(currentPlayer, state);
    #####: 1053:	  drawCard(currentPlayer, state);
        -: 1054:	}
        -: 1055:	else{//Action Card
    #####: 1056:	  state->numActions = state->numActions + 2;
        -: 1057:	}
        -: 1058:      }
        -: 1059:	    
    #####: 1060:      return 0;
        -: 1061:		
        -: 1062:    case ambassador:
    #####: 1063:      j = 0;		//used to check if player has enough cards to discard
        -: 1064:
    #####: 1065:      if (choice2 > 2 || choice2 < 0)
        -: 1066:	{
    #####: 1067:	  return -1;				
        -: 1068:	}
        -: 1069:
    #####: 1070:      if (choice1 == handPos)
        -: 1071:	{
    #####: 1072:	  return -1;
        -: 1073:	}
        -: 1074:
    #####: 1075:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1076:	{
    #####: 1077:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1078:	    {
    #####: 1079:	      j++;
        -: 1080:	    }
        -: 1081:	}
    #####: 1082:      if (j < choice2)
        -: 1083:	{
    #####: 1084:	  return -1;				
        -: 1085:	}
        -: 1086:
        -: 1087:      if (DEBUG) 
        -: 1088:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1089:
        -: 1090:      //increase supply count for choosen card by amount being discarded
    #####: 1091:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1092:			
        -: 1093:      //each other player gains a copy of revealed card
    #####: 1094:      for (i = 0; i < state->numPlayers; i++)
        -: 1095:	{
    #####: 1096:	  if (i != currentPlayer)
        -: 1097:	    {
    #####: 1098:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1099:	    }
        -: 1100:	}
        -: 1101:
        -: 1102:      //discard played card from hand
    #####: 1103:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1104:
        -: 1105:      //trash copies of cards returned to supply
    #####: 1106:      for (j = 0; j < choice2; j++)
        -: 1107:	{
    #####: 1108:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1109:	    {
    #####: 1110:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1111:		{
    #####: 1112:		  discardCard(i, currentPlayer, state, 1);
    #####: 1113:		  break;
        -: 1114:		}
        -: 1115:	    }
        -: 1116:	}			
        -: 1117:
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case cutpurse:
        -: 1121:
    #####: 1122:      updateCoins(currentPlayer, state, 2);
    #####: 1123:      for (i = 0; i < state->numPlayers; i++)
        -: 1124:	{
    #####: 1125:	  if (i != currentPlayer)
        -: 1126:	    {
    #####: 1127:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1128:		{
    #####: 1129:		  if (state->hand[i][j] == copper)
        -: 1130:		    {
    #####: 1131:		      discardCard(j, i, state, 0);
    #####: 1132:		      break;
        -: 1133:		    }
    #####: 1134:		  if (j == state->handCount[i])
        -: 1135:		    {
    #####: 1136:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1137:			{
        -: 1138:			  if (DEBUG)
        -: 1139:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1140:			}	
    #####: 1141:		      break;
        -: 1142:		    }		
        -: 1143:		}
        -: 1144:					
        -: 1145:	    }
        -: 1146:				
        -: 1147:	}				
        -: 1148:
        -: 1149:      //discard played card from hand
    #####: 1150:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1151:
    #####: 1152:      return 0;
        -: 1153:
        -: 1154:		
        -: 1155:    case embargo: 
    #####: 1156:      return embargoPlay(currentPlayer, state, handPos, choice1);
        -: 1157:      /*//+2 Coins
        -: 1158:      state->coins = state->coins + 2;
        -: 1159:			
        -: 1160:      //see if selected pile is in play
        -: 1161:      if ( state->supplyCount[choice1] == -1 )
        -: 1162:	{
        -: 1163:	  return -1;
        -: 1164:	}
        -: 1165:			
        -: 1166:      //add embargo token to selected supply pile
        -: 1167:      state->embargoTokens[choice1]++;
        -: 1168:			
        -: 1169:      //trash card
        -: 1170:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1171:      return 0;
        -: 1172:      */
        -: 1173:		
        -: 1174:    case outpost:
    #####: 1175:      return outpostPlay(currentPlayer, state, handPos);
        -: 1176:      /*//set outpost flag
        -: 1177:      state->outpostPlayed++;
        -: 1178:			
        -: 1179:      //discard card
        -: 1180:      discardCard(handPos, currentPlayer, state, 0);
        -: 1181:      return 0;
        -: 1182:      */
        -: 1183:    
        -: 1184:    case salvager:
        -: 1185:      //+1 buy
    #####: 1186:      state->numBuys++;
        -: 1187:			
    #####: 1188:      if (choice1)
        -: 1189:	{
        -: 1190:	  //gain coins equal to trashed card
    #####: 1191:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1192:	  //trash card
    #####: 1193:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1194:	}
        -: 1195:			
        -: 1196:      //discard card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case sea_hag:
    #####: 1201:      for (i = 0; i < state->numPlayers; i++){
    #####: 1202:	if (i != currentPlayer){
    #####: 1203:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1204:	  state->discardCount[i]++;
    #####: 1205:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1206:	}
        -: 1207:      }
    #####: 1208:      return 0;
        -: 1209:		
        -: 1210:    case treasure_map:
        -: 1211:      //search hand for another treasure_map
    #####: 1212:      index = -1;
    #####: 1213:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1214:	{
    #####: 1215:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1216:	    {
    #####: 1217:	      index = i;
    #####: 1218:	      break;
        -: 1219:	    }
        -: 1220:	}
    #####: 1221:      if (index > -1)
        -: 1222:	{
        -: 1223:	  //trash both treasure cards
    #####: 1224:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1225:	  discardCard(index, currentPlayer, state, 1);
        -: 1226:
        -: 1227:	  //gain 4 Gold cards
    #####: 1228:	  for (i = 0; i < 4; i++)
        -: 1229:	    {
    #####: 1230:	      gainCard(gold, state, 1, currentPlayer);
        -: 1231:	    }
        -: 1232:				
        -: 1233:	  //return success
    #####: 1234:	  return 1;
        -: 1235:	}
        -: 1236:			
        -: 1237:      //no second treasure_map found in hand
    #####: 1238:      return -1;
        -: 1239:    }
        -: 1240:	
    #####: 1241:  return -1;
        -: 1242:}
        -: 1243:
    10720: 1244:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1245:{
        -: 1246:	
        -: 1247:  //if card is not trashed, added to Played pile 
    10720: 1248:  if (trashFlag < 1)
        -: 1249:    {
        -: 1250:      //add card to played pile
      420: 1251:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      420: 1252:      state->playedCardCount++;
        -: 1253:    }
        -: 1254:	
        -: 1255:  //set played card to -1
    10720: 1256:  state->hand[currentPlayer][handPos] = -1;
        -: 1257:	
        -: 1258:  //remove card from player's hand
    10720: 1259:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1260:    {
        -: 1261:      //reduce number of cards in hand
        4: 1262:      state->handCount[currentPlayer]--;
        -: 1263:    }
    10716: 1264:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1265:    {
        -: 1266:      //reduce number of cards in hand
    #####: 1267:      state->handCount[currentPlayer]--;
        -: 1268:    }
        -: 1269:  else 	
        -: 1270:    {
        -: 1271:      //replace discarded card with last card in hand
    10716: 1272:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1273:      //set last card to -1
    10716: 1274:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1275:      //reduce number of cards in hand
    10716: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:	
    10720: 1279:  return 0;
        -: 1280:}
        -: 1281:
    #####: 1282:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1283:{
        -: 1284:  //Note: supplyPos is enum of choosen card
        -: 1285:	
        -: 1286:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1287:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1288:    {
    #####: 1289:      return -1;
        -: 1290:    }
        -: 1291:	
        -: 1292:  //added card for [whoseTurn] current player:
        -: 1293:  // toFlag = 0 : add to discard
        -: 1294:  // toFlag = 1 : add to deck
        -: 1295:  // toFlag = 2 : add to hand
        -: 1296:
    #####: 1297:  if (toFlag == 1)
        -: 1298:    {
    #####: 1299:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1300:      state->deckCount[player]++;
        -: 1301:    }
    #####: 1302:  else if (toFlag == 2)
        -: 1303:    {
    #####: 1304:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1305:      state->handCount[player]++;
        -: 1306:    }
        -: 1307:  else
        -: 1308:    {
    #####: 1309:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1310:      state->discardCount[player]++;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //decrease number in supply pile
    #####: 1314:  state->supplyCount[supplyPos]--;
        -: 1315:	 
    #####: 1316:  return 0;
        -: 1317:}
        -: 1318:
     5560: 1319:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1320:{
        -: 1321:  int i;
        -: 1322:	
        -: 1323:  //reset coin count
     5560: 1324:  state->coins = 0;
        -: 1325:
        -: 1326:  //add coins for each Treasure card in player's hand
    51560: 1327:  for (i = 0; i < state->handCount[player]; i++)
        -: 1328:    {
    46000: 1329:      if (state->hand[player][i] == copper)
        -: 1330:	{
    25225: 1331:	  state->coins += 1;
        -: 1332:	}
    20775: 1333:      else if (state->hand[player][i] == silver)
        -: 1334:	{
     5050: 1335:	  state->coins += 2;
        -: 1336:	}
    15725: 1337:      else if (state->hand[player][i] == gold)
        -: 1338:	{
     5050: 1339:	  state->coins += 3;
        -: 1340:	}	
        -: 1341:    }	
        -: 1342:
        -: 1343:  //add bonus
     5560: 1344:  state->coins += bonus;
        -: 1345:
     5560: 1346:  return 0;
        -: 1347:}
        -: 1348:
        -: 1349://refactored function      
      300: 1350:int adventurerPlay(int currentPlayer, struct gameState *state, int *temphand){
        -: 1351:    
      300: 1352:    int drawntreasure = 0;
      300: 1353:    int z = 0;
        -: 1354:    int cardDrawn;
        -: 1355:    
     1080: 1356:    while(drawntreasure<2){
      480: 1357:	   if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
      116: 1358:	   shuffle(currentPlayer, state);
        -: 1359:	   }
      480: 1360:	   drawCard(currentPlayer, state);
      480: 1361:	   cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      480: 1362:	   if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -: 1363:        //BUG INSERTED-SHOULD BE ++ NOT +2
      300: 1364:        drawntreasure = drawntreasure + 2;
        -: 1365:	    else{
      180: 1366:        temphand[z]=cardDrawn;
      180: 1367:	   state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      180: 1368:        z++;
        -: 1369:	   }
        -: 1370:    }
      780: 1371:    while(z-1>=0){
      180: 1372:	   state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      180: 1373:	   z=z-1;
        -: 1374:      }
      300: 1375:      return 0;
        -: 1376:}
        -: 1377:
        -: 1378://refactored function
    10300: 1379:int smithyPlay(int currentPlayer, struct gameState *state, int handPos)
        -: 1380:{
        -: 1381:    //to draw three cards
    10300: 1382:    int i = 0;
    51500: 1383:    while(i < 3)
        -: 1384:    {
    30900: 1385:        drawCard(currentPlayer, state);
    30900: 1386:        i++;
        -: 1387:    }
        -: 1388:        
        -: 1389:    //to discard card from hand
        -: 1390:    //BUG INSERTED TO DISCARD FLAG, SHOULD BE 0
    10300: 1391:    discardCard(handPos, currentPlayer, state, 1);
    10300: 1392:    return 0;
        -: 1393:}
        -: 1394:
    #####: 1395:int embargoPlay(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1396:{
        -: 1397:    //+2 Coins
    #####: 1398:    state->coins = state->coins + 2;
        -: 1399:			
        -: 1400:    //see if selected pile is in play
    #####: 1401:    if ( state->supplyCount[choice1] == -1 )
        -: 1402:	{
    #####: 1403:        return -1;
        -: 1404:	}
        -: 1405:			
        -: 1406:    //add embargo token to selected supply pile
    #####: 1407:    state->embargoTokens[choice1]++;
        -: 1408:			
        -: 1409:    //trash card
        -: 1410:    //BUG INTRODUCED, CARD NOT TRASHED, FLAG SHOULD BE 0
    #####: 1411:    discardCard(handPos, currentPlayer, state, 0);		
    #####: 1412:    return 0;
        -: 1413:}
        -: 1414:
    #####: 1415:int outpostPlay(int currentPlayer, struct gameState *state, int handPos)
        -: 1416:{
        -: 1417:    
        -: 1418:    //set outpost flag
    #####: 1419:    state->outpostPlayed++;
        -: 1420:			
        -: 1421:    //discard card
    #####: 1422:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1423:    return 0;
        -: 1424:}
        -: 1425:
      300: 1426:int great_hallPlay(int currentPlayer, struct gameState *state, int handPos)
        -: 1427:{
        -: 1428:     //+1 Card
      300: 1429:      drawCard(currentPlayer, state);
        -: 1430:			
        -: 1431:      //+1 Actions
        -: 1432:      //BUG INTRODUCED SHOULD BE ++ NOT + 2
      300: 1433:      state->numActions = state->numActions + 2;
        -: 1434:			
        -: 1435:      //discard card from hand
      300: 1436:      discardCard(handPos, currentPlayer, state, 0);
      300: 1437:      return 0;
        -: 1438:    
        -: 1439:}
        -: 1440://end of dominion.c
        -: 1441:
